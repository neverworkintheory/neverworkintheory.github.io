Thank you for having me,
so I'm Ethel Tshukudu from the University of Botswana.
Last year I completed my PhD at - from the University of Glasgow
and my topic was on understanding conceptual transfer in students learning new programming languages.
So I'm really happy to try to summarize my thesis today in 10 minutes.
So the motivation behind this topic was that while I was still in Botswana
we did a study where we were studying the correlation from - of the secondary school grades of students
who are now learning the Java programming language.
So we were comparing their scores in the secondary school grades
and how they correlate to their scores in the Java programming language.
And we were surprised to find that the students who were doing computer studies at secondary school,
there wasn't any correlation with their scores with the Java course.
So - but later on I found out that, oh, actually the syllabus did not include coding,
but still that, you know, started the excitement to say,
oh let's actually, you know, study how students actually transfer once they have learned a programming language,
perhaps in CS0 in first year and then they progressed to learn a second programming language in year two.
So I started off by exploring and investigating using code comprehension techniques
and my - my theoretical basis were leaning towards the natural language theories
of how people understand the natural languages.
So my research was, you know, was in four years,
so I - I did a - so my PhD is in computer science but my specialty is in computer science education.
So computer science education is about how people teach and how people learn, you know, computer science.
So in the first three phases of my thesis,
I was just exploring and trying to see how semantic transfer happens
when students are, you know, reading code.
So based on how similar, you know, two programming languages may be.
So I started off by exploring that concept - that idea,
and then, you know, the - the results were promising,
so I designed a model of programming language transfer based on the first study in phase one.
And in phase three then I - I validated the model through four studies
of students transitioning from first year to second year in European universities.
And then the second part of my thesis now that I, you know, I kept on seeing repetitive results,
I started to explore now how can, you know, educators help students to transfer knowledge from one programming language to the other.
So the contributions of my thesis, you know, I - I drew a model of programming language transfer,
as you can see there,
where - I'm saying that, oh, I am claiming that once you are getting a student who has never learned any programming language
and you teach them a programming language,
what will be happening inside their brain is that
they will have, you know, the conceptual knowledge of that first programming language you've taught them,
how it's a, you know, how it looks like - the syntax level and how it's - it executes in the machine
so they will link that idea to the conceptual level.
But then once you introduce the students to the second programming language,
they have this new knowledge where they will now be linking programming language that they already know
to this new programming language that you you are teaching them
and that means the knowledge structures start to expand.
As you see, there are different types of branches, which I will explain,
but the the whole idea is that they will be faced with three types of -
once you - you teach them the programming language,
they'll be faced with three types of constructs that they get to learn.
So when you teach them the second programming language,
they may see constructs.
Let me explain it as, you know, break down that drawing.
So they will see constructs that I - I termed as true carry-over constructs.
So these constructs will have similar syntax to the programming language they know
and the new language they're learning
so in this case, I'll just keep on seeing - using Python and Java so that it's easier to understand.
And my thesis was about students who were transitioning from a Python imperative programming language to a -
and it was non-OO -
to a Java object-oriented language.
So an example of a true carry-over construct would be a while loop in Python and in Java.
When you look at the syntax it's really, really similar -
the only differences are, you know, there are brackets there,
there are columns there,
maybe the variable is being declared there,
but most - the most parts of the code are very similar.
So I've been giving students these good snippets categorizing them according to my model
and asking them to read code and give outputs.
And what happens is,
when they do that,
remember the drawing I showed you -
it will show that the first knowledge that they are coming in,
they - they see programming language one and programming language two as the same thing,
so nothing happens -
there isn't any bad impact of semantic transfer,
it's actually a positive one,
because that would mean,
when you are teaching a student the Java while loop
you don't have to go too much into details about it
if they already know it in Python,
so there isn't any branching in their knowledge structures there.
And then when you go on you teach them another concept called the false carry-over concept
where there may be similar syntax but the semantics are different.
An example there will be equality of composite types like arrays.
You will find that in Python the equality there is comparing those values inside,
but the equality there in Java is comparing the actual addresses.
So what would happen is,
a student will learn this concept the -
so we are hoping we -
so as educators we'll be hoping that they should have a branching at the conceptual - at the semantic level,
but the syntax should be linking together.
But what you are seeing happening is the students will still consider those two code snippets executing in a similar way,
which gives us the last - the drawing of a perceived true carry-over concept.
And then the last type of concept is the - the way -
we call it an abstract true carry-over concept.
Although we know all these code snippets are abstract
but this one was more like, you know,
the example was more on - when students are learning objects
because they are transitioning from this imperative non-object-oriented language
to another object-oriented language
and it throws them off, you know,
because the syntax is different,
the ideas - the naming is different,
you call them objects, you call them classes, you know,
and - but when we look behind, you know,
when we try to look at, you know, the actual ideas around the objects and Python dictionaries,
they are representing some types of, you know, data structures in the sense that -
you know it's about the detail, though in Java objects it's more like structured data and combined with the behavior at the same time.
So there are those challenging things that the students,
when they see such - when they learn such a - change the paradigm - paradigm
they will see those concepts.
Ideally we would want them to see it as, okay, the semantics, yeah, they are different but not that different,
but then there's that seen that, like,
they're learning something totally new,
where you - you now have two concepts structures in their - in their brains.
So this, like I said,
the model was validated in, you know, five - in four instances in European universities.
It's actually more than that but the ones I wrote in my thesis were four.
And these are the results.
I was getting very similar patterns across all the studies where you see the first light blue language is the Python -
the one they are moving - transitioning from,
and then when they see a true carry-over construct,
the one that, you know, results in positive transfer, yeah, they don't -
there isn't any significant difference in the way they perform when they're learning the second language.
But when the semantics are different but the syntax is similar - the middle one -
you see that they perform very less in the second programming language and it goes on also to the last,
where the syntax is different but the underlying, you know, behavior or concepts are similar.
So I designed a - a pedagogical approach,
which I won't go into details with,
but I do have papers if you are interested in reading.
But basically, just to let the educators, you know, help the students to understand and use this - this differences
between programming languages as an opportunity to help the students
by comparing and correcting their misconceptions which they are bringing from the first programming language
the - the instructors are helping them expand their knowledge and deepen their conceptual understanding.
So this is just a model that I - I would advise instructors to do when they are transitioning students.
So the - the overall,
what did I learn from the entire, you know, PhD thesis on transfer?
So yes,
we can't avoid multiple programming languages in a curricula let alone even in the working environment,
software developers get to use different multiple programming languages,
but what we are realizing is that relative novices have fragile knowledge,
so it's innate, partial, and sometimes it's misplaced.
So usually educators just focus on, let's solve a problem - solve a problem,
and under - overestimate that the students have a strong grasp of the first programming language and concepts.
So they assume a lot of knowledge which is not there in - in students.
So how then do we move forward?
We use this idea of multiple programming languages to deepen conceptual understanding for students
by finding the gaps in their knowledge,
you know,
and giving it as an opportunity to teach these hidden concepts that don't come straightforward usually,
like scoping, analyzing.
Also you allow them to - feed them correct.
So the next steps I often get asked, you know,
which is the best programming language then to start teaching students with,
and usually I just say, it -
I, you know, I don't know, I don't think it really matters but when they move to the second one,
that's when you use all the ideas I said earlier about deepending conceptual understanding.
So maybe the question would be, you know, who - who would benefit from a research like this, you know,
is it students who are at university level moving from CS0 to CS1,
is it, you know, the programmers who are practicing at work, and all that.
But I'm planning on doing further validations of the model and the pedagogical approach I - I proposed.
Thank you very much.
So these are the papers if you are interested in understanding more of this research and, yeah, thank you, thank you very much.
Thank you very much, Ethel.
We've got time for one question,
and the question that has come in is,
how does this research relate to things like Chat GPT and transferring its understanding between languages.
Oh, I was - when - when you asked about Chat GPT and this,
I was going to think from a human perspective.
It's actually an opportunity to compare the kind of, you know, code snippets we are writing using Chat GPT
because I can say, you solve a problem in two different languages
and it will give me different answers for me to be able to explore and compare and contrast and expand my understanding.
