Thank you for the introduction.
In the next 10 minutes I'm going to give you a peek into the field of software effort estimation
and I'm going to show you how you can tackle the delays in your software deliveries.
I will also discuss why it's important to take a holistic approach to on-time software delivery.
So we all know that late delivery and cost overruns have been common problems in the software industry for decades.
On average software projects run over time around 30% and this percentage does not seem to have decreased since the 1980s.
And even though effort estimation is at the heart of almost all industries,
it's especially challenging for the software industry
because software development is a complex undertaking that is affected by a variety of vast social and technical factors.
While currently most software companies they rely on human experts' subjective assessments to arrive at an effort estimate.
And human experts use their intuition, they use rule of thumb, or they use generalized models.
And research has shown that this may lead to inaccurate and inconsistent estimates
because software development is, yeah, there are too many unknowns and too many interrelated factors to reduce it to a gut feeling or to a rule of thumb.
So we need to have a deeper understanding of the factors that play a role here,
how they interact with each other,
and we need to incorporate them into our effort estimation models to reduce the delay in software deliveries.
So to investigate the most relevant factors and their interactions we performed case studies at ING.
ING is a large Dutch internationally operating bank.
And we use the mixed methods approach - so we combined qualitative survey data with quantitative repository data
to to corroborate the respondents' perceptions and to also validate - to validate their perceptions
and to capture multiple perspectives on the phenomenon of on-time software delivery.
And we wanted to find out what factors affect delays in software delivery and how are these factors related to each other.
And with such insights we can actually better understands what data and techniques are needed to improve effort estimation methods
and to predict and manage delay risks.
Okay, so from the open-ended survey responses and to - our validation with the repository data
we identified 25 factors that affect delays in software deliveries and we organize these factors along five risk dimensions.
So the first one is the organizational dimension
which actually concerns the uncertainty surrounding the organizational environments in which your software delivery takes place.
And three of the organizational factors are ranked to be among the top five most influential factors.
So, for example, organizational alignment, which is actually having a shared vision and mission,
which can ensure the alignments between the implementation of your software delivery and your business strategy,
and this is reported to contribute to your timely software delivery.
Respondents also reported that they are often hampered by organizational politics
and the geographic distribution of the software teams.
Next we have process factors which represents the effectiveness and the maturity of the way your software teams work.
And in this category, requirements refinements is the top mentioned factor that affects the delay in your software deliveries.
In fact it's the process of defining your software delivery and breaking it down into smaller work items,
and missing or lacking details is reported to be the main delay factor in software deliveries.
We also have project factors which represents the inherent complexity and uncertainty of a software project.
And in this category, task dependencies constitute the top mentioned delay factor.
And these depends dependencies can occur across teams and across products due to analyzed priorities and inconsistent schedules.
We have the people related factors as well.
So respondents reported that teams that are more stable, that are more skilled, more familiar with each other,
they they more often deliver software on time.
And the final category are the technical factors,
and respondents reported to be often delayed by technical dependencies and issues related to poor code documentation and unreliable IT infrastructure.
But the factors in this category, they are reported to have the smallest impacts across all categories.
So to summarize,
there's an overview of the top five factors that have the greatest impact on the delays in your software deliveries.
So these are the factors that you should pay a great deal of attention to.
And the interesting thing is that none of them are in software at all, right,
they are related to your organizational environments and the quality of your processes,
so how your software teams work.
And we can also see that they are also controllable.
So these are the factors that software teams often complain about, right, this is something that is happening to us,
we don't have any impacts on it,
but you can act upon upon your requirements refinements,
you can invest in your dependency management,
and you can also invest in a more healthy organizational culture.
So we know that these are the top factors that have an impact on your delay,
so this means we should regulate them,
but then the next question is how should we regulate them?
So to answer that question we looked into different types of relationships between factors and on-time delivery.
We more specifically focused on three types of orthogonal effects.
So we looked into direct relationships, indirect relationships, and contributory relationships.
And this enabled us to make a distinction between simple, complex, and condition-dependent relationships.
I'm not going into the very specific interactions between factors
but this actually enables us to put all the results together.
So the factors - the factor rankings and their relationships to come - to create a conceptual framework of on-time software delivery
as shown here.
So it might look a bit overwhelming at first,
but it actually visualizes the results that we discussed so far.
So you can see the factors in the ellipses,
the categories in the blue rectangles,
and the arrows visualize the sign and the direction of the relationships that we found.
And the interesting thing is that factors interact hierarchically with each other.
So organizational factors interact with people factors, which in turn impacts the technical factors,
and these hierarchical interactions indicate that changing one factor may impact another.
This shows that on-time software delivery is affected by a system of interrelated factors that you should look at as a whole.
So you should use a holistic approach to tackle the delays in your on-time software - in your software delivery.
So don't try to tackle the factors individually but actually formulate systematic treatments
based on these direct and indirect relationships to have the greatest impact on your delay.
So I'll give you a concrete example.
So the organizational factor "executive support" is perceived to have an indirect impact on timely software delivery through team stability
and team stability directly affects how effective a team is in building skills and knowledge over time
and this affects the technical factors code quality and bugs or incidents
which introduce necessary rework for the software team and thereby delay.
So this means that establishing a stronger executive support may lead to more stable - more skilled teams
that are better able to - to deal with - to maintain code quality and that can better resolve delays that are caused by bugs or incidents.
And this path from higher executive support to the technical factors is an example of many similar paths
that we can derive from our conceptual framework
and that enable us to yeah make hypotheses about what can actually improve your on-time software delivery.
So what have you learned from this?
Well first we saw that on time software delivery is affected by a system of interrelated factors that require a holistic approach.
Secondly we saw that the top most influential factors are not in software they are actually in your organizational environments
and in the quality of your processes
so make sure to invest in your requirements refinements, effective backlog performance, a better dependency management,
and in a healthy organizational environment.
And at the same time, make sure to incorporate these factors in your effort estimation models
because when you capture information not only about the software task but also about the processes, your team, your organization,
you can actually enhance the the predictive power of your effort estimation models.
Yes, so if you're interested in this work and if you would like to know more about the conceptual framework,
how to apply it in practice,
then feel free to contact me and thank you.
All all,
right thank you very much Elvan,
questions coming in from our viewers,
and the the first one is, where and how can I learn these quote political skills as a programmer
because they certainly weren't part of my degree.
Well none of mine as well,
yeah,
based on my own experience it's something that you learn over time I would say,
so I - I would say that's - if you - if you end up in more situations where you actually need these political skills to,
for example,
defend your products,
to actually create business strategy,
I think it will come with with experience but also maybe with age.
And I really - I think this is a related question.
Is this the role or is - sorry I'm just trying to make sense of this -
is this something that product managers or project managers are better able to do than developers?
Is that part of their role - to handle these non-technical issues?
Yeah,
that is definitely part of their responsibilities.
So in my research I've mainly looked at agile projects where they work with, hey, you have a software development team
and you have a product owner that's the person who actually represents the interest of the the client - the customer -
and it's also the person who bridges the gap between the software developers and the managers.
But I think that would actually be nicer if we wouldn't need a product owner, right,
if the environment would be that it's apparent that as a developer you can go directly to management and, well, share your ideas
and your your wishes, yeah.
Okay, and I have one last question before we go on to the next speaker and this is a personal question.
Okay.
Was there any evidence in your study that these things are easier to negotiate when management has come from a technical background
or are software engineers turned managers just as difficult to work with in this sense as people coming in with with MBAs?
Yeah, yeah, so based on my own experience I would say that it works better indeed if the - if management has its - has a technical background
especially when it comes to the technical factors that I mentioned.
So I wanted to spend more time on code refactoring, code quality, software testing,
I think it's it's easier to understand the added value of these factors if you do have a background in computer science.
