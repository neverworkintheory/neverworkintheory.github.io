Good morning afternoon or evening wherever you are my name is Felienne. I'm an associate professor at Leiden University and indeed I'm going to talk today about how to get better at naming things. You know, naming things is sometimes said to be the hardest program - that's really the hardest problem in computer science - so let me help you to get better at naming things because this is a question many people struggle with.
Firstly some context. Names have both content and also form. So the content of a name is something like what - what the name depicts, right, so is name, that's the the ingredients in the variable name. But variable names also have a certain form, you might use, for example, camel case where a capital letter indicates the next word, but some programming languages prefer snake case where you use underscores to divide words. That part of the variable naming is the form, and we will give - I will give some advice for both these parts of variable naming in the talk today.
Let's start with the contents: what do we actually put in the variable name? I guess most of you are familiar with the idea of code smells. Fowler's definition for parts of code that aren't, you know, they aren't necessarily a mistake or an error, but they're just not really structured nice enough. So code smells are long methods, for example, you have a very, very long method 100 or 200 lines, that's just not structured optimally. However, oh sorry apparently my camera is not on - there I am.
So code smells, you have, like, a very long method that's 100 lines, where you have a long perimeter parameter list, right, so 10 20 30 parameters in a method. These are code smells, and as I said, these are parts of code that you're just not so very happy about.
The traditional code smells as we know them are structural smells, so they talk about what the structure of code is. But newer work also talks about specific code smells in variable names called linguistic smells. So they're like code smells in the sense that they're just not perfect, but they talk about names rather than about structure. For example, imagine you have a function that's - or method - that's called "isValid" and it takes some sort of external ID and the method is going to check, is this a valid ID. Question I brought my friend, the Participation Panda, if we have the Participation Panda on screen it means you audience have to do something. So question for you, if you see a method like this isValid, what do you think the return type might be? I'll give you just a few seconds to think about what the return type is here.
Okay so I guess most of you said, oh this is probably going to be a Boolean, right? Because isValid gives the idea that a Boolean will be returned. Often this is the case but sometimes we try to be smart, right, if you have an example like this where you have an external ID that is going to be validated, maybe we do some sort of conversion, right, you take our external ID like a customer number or student number, we try to convert it to an internal ID, something maybe we use in the database. If this conversion succeeds, then we have this internal ID, and we try to be smart, we don't just say here's True, we also give this internal ID back. This is easy because then in the call site, you have this ID that you can then use to query the database.
This is quite common but of course it is misleading if you're at the call site you think, oh this is going to be a Boolean, but it's something slightly different from a Boolean, then you can get confusing code. In the paper about linguistic code smells, six different categories of these smells are defined. Methods that do more than they say, methods that do less than they say, and methods that do the reverse of what they say. Sometimes you have an openConnection that actually closes a connection for some historical reason the code ended up that way. So these are things you want to avoid because they make it more confusing.
In addition to methods, sometimes identifiers can also have linguistic code smells, where you have something like allCustomers where you would expect a list but then you it only holds the next customer in line. Code can sometimes also be structured in that way, either because it's a mistake or because of some historical reason the code just ended up that way and everyone knows how it works. So identifiers can also suffer from linguistic code smells.
In addition to work that has defined the code smells, there's also been research that has looked at what is the impact of code smells. Of course we have this sense that this is confusing, right, so we can say, oh linguistic code smells are confusing but this has actually been studied. So there's a super nice paper by Fakhoury et al that has actually put a type of brain scanner on people's heads while they look at codes with linguistic code smells. And their results show that linguistic smells actually increase cognitive load. So that just means, your brain has to work harder to process code that has these type of code smells. So that's not what we want.
I promised you two things, right, so, so far we've looked at the content of names - what words - what are the meaning of words that we put into variable names - but shape, the form of the variable name also matters. It's not just about the words. One more panda for you, so I hope that you are still participating. Suppose we are storing the maximum number of orders in a month. What would be a good variable name. I'll just give you a few seconds, write this down, maybe in the chat if you want to, or on a piece of paper, just think about what variable name would you pick here.
So my guess is that there is a wide variety of different things that people wrote down. And maybe this could be max_orders_monthly or month - month or monthly_orders_max or maximum_monthly_orders. All of these things are somewhat sensible, and it might depends also on what your own native language is - what do you think an order is that sort of fits with how you think. There's nothing wrong with either of them, but it's just not very comfortable, of course if the quantifier, maximum or minimum, sometimes is in the beginning, sometimes it's in the end, sometimes it's an abbreviation, and sometimes it is not, and the same is true for orders: it could sort of live in all places in the variable name but if it's in different places, you can imagine this makes it harder to produce - to process the variable names.
The idea that we describe here is called a "name mold" in a paper by Feitelson et al. They describe a mold like a thing you use to make a bronze statue, a mold in which names can fit. so another panda question for you: imagine two developers have to pick a variable name. What chance do you think there is of the two developers picking the same variable name, for such a prompt just like the one I just gave you. What is your guess for how big this chance is?
So it's not very high, I hope it isn't lower than you thought - the chance is actually only seven percent. So if you don't make any further agreements on how to structure your variable names, you just have a seven percent chance of picking the same name. That - that's just not very high. But this paper also shows, which is I think a really, really nice result, that if you agree on molds - if as a team you say, this is the mold that we pick and then you always use that same structure, then naming quality improves. And they had external experts verify the quality of the names, so name quality just goes up if you agree on the name molds.
So just to summarize, what can you do now, immediately, to get better at naming things? And I want to point out, like, for free, right, some of the papers that look at some things in programming is like, oh, you have to download this tool or you have to do this or you have to learn something that's really hard. But this name mold stuff, and this linguistic code smell, it's super easy, right. Tomorrow you can go to your code base and think, hey do you have any linguistic code smells. You can just see is it - does it start with "is" let's make sure it's a Boolean. And as a team you can talk about name molds, you can say, okay, what do we do - do we always do the quantifier in the beginning or at the end. What is our plan here? And just with a little bit of refactoring you can really increase the naming quality in your code base. So it's relatively easy intervention, you can really do to make your code base better.
That's it, I'm on twitter I'm at "felienne" conveniently my handle is just my first name. You can also go to felienne.com if you want to know more about me - specifically if you want to know more of these results - of programming and software engineering applies to the daily life of a programmer, you might be interested in checking out my book, "The Programmer's Brain", you can buy that through felienne.com/book.
