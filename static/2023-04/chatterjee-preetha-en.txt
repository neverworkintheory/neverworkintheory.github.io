Thank you for the warm welcome.
I'm very glad to be a part of the NWIT session today.
So today I'm going to talk about my work on emotion awareness in software engineering,
specifically towards understanding how we establish trust in software development teams.
So I'm going to start with a little bit of motivating tweets.
So as you can see from some of the tweets from practitioners here that,
you know,
developers do value and acknowledge the importance of trust and coordination in software engineering teams
This is incredibly important towards building good software
and you know if you don't care about human aspects like trust and collaboration in your project
your project is already in trouble, right?
So what I wanted to do as a researcher - me and my lab at Drexel - we wanted to understand,
okay,
is there a way we can, you know, analyzeuh and see how specifically trust is incorporated or exhibited on GitHub.
Because, you know, this is so important,
but trust seems to be very vague and we don't understand what we mean by trust.
So before we start analyzing and looking into GitHub repositories it's important for us to know and understand what is trust.
And it seems like the answer to that question is quite complicated.
So several researchers in the field of psychology have,
you know,
studied trust and come up with different types of definitions and,
you know,
the one that is the most closest to software engineering,
specifically because it's designed for virtual teams,
is listed on my slide here.
So I'm just gonna pause for 5-10 seconds for people to read it because I'm just just not gonna read something out on the slide.
Okay so what do we understand by this?
It's vague, right, we don't understand really what is trust and we kind of - we are making decisions in software engineering teams
about, like, who we trust, who we don't trust but we don't completely understand what we mean by it.
So, you know, we all are engineers,
so let's try to break it down and see what are the different dimensions and what drives our decisions in software engineering teams.
So based on psychology there are several dimensions of trust.
By that I mean factors that implicitly drive your decisions.
So what are those?
So the first is action-based trust.
What is that?
So for example you would trust a person more if you can communicate well with them,
with minimal delays and good communication overall,
because you just know that that person is more reliable,
right?
Then there is commitment-based trust.
So that happens when you both of you are committed towards fulfilling a certain type of task or you have a specific goal,
a common goal,
Then is competence.
So for example say if you are trying to assign a bug to a developer in your team,
you would want to assign it to someone who you think is competent enough to solve that problem,
so that is confidence-based trust.
Next is institutional trust.
So for example people who belong to the same institutions tend to trust each other more
because they think that they belong to the same institution and therefore have the same set of values and goals.
The next steps were interesting it's personality-based trust.
So some some people inherently are - have more propensity to trust others,
so that is just like a personality-based trust.
And the next one is transfer trust.
So what we mean by that is,
say,
I know a person who I trust,
who we say is person A,
and person A recommends me person B who I do not know
but since I trust A I would trust that recommendation and would therefore trust the new recommended person B.
So that is what we call transferred trust.
Okay so these are the the dimensions of trust that we find in psychology,
but we want to understand how this,
you know,
is translated in a software engineering context.
So to do that we we did a preliminary study on GitHub requests which has been accepted at ICSE Senior track this year
where we manually analyzed a set of 100 pull requests on GitHub.
We chose four repositories - four popular open source repositories - to collect these pull requests,
and we consider just not the text but the overall - the metadata, the developer profiles, everything to do this analysis.
So since we talked about all these dimensions up first,
let's see how exactly it translates in a context of pull requests on GitHub.
So we see action-based trust being exhibited when the frequency and quality of comments or reviews of the pull requests, right,
so if there's a good quality comment, good explanation,
and then the person is just more proactive and responsive then you develop an action-based trust.
Similarly,
commitment-based trust is reviewing pull requests when requested
or addressing a reviewer's comment.
The third one is interesting - so we tend to look at people's past actions in the repository,
and on GitHub, for example, you can look at the developer profile
and know that, okay, how many repositories that developer has contributed to,
have they, you know, what is their overall, you know, statistics so far,
how long they have been contributing and so on and so forth.
We also noticed that developers who are associated with, say, the same GitHub organizations
would tend to trust each other more.
The personality-based trust is a little bit tricky because we, you know, from our research we know that
these personality-based tools are - the automatic detection tools does not perform as well on texts,
so,
you know,
it's just - therefore we did not rely on any text-based identification of personality-based trust here.
What we did was,
we would - we actually looked at overall, like, with the manual analysis we see that developers who accept overall,
accept a high number of pull requests from people that they do not know before
have a general higher propensity to trust.
And finally the transfer trust,
of course the well-established members recommend new contributors
and that is how we develop transfer trust on GitHub.
So this is all good but I think like, you know, now that we have an idea of how it is reflected on pull requests
I thought it would be good if I can show you a pair of examples and how it is exactly exhibited on pull requests.
So on the left I'm going to show you a pull request which has been accepted and shows high level of trust
and on the right I'm going to show you a pull request example where, you know, it's - it has not been accepted at the end
and it does not exhibit high levels of trust.
So just to go dimension by dimension here,
first you see that here, just by looking at the people who have, you know, started the pull request,
that you see that they're like,
this person has a lot of followers there's 96%  pull request acceptance,
a member of the project,
so you kind of develop a higher trust on this person than this person who has relatively less, you know, well,
number of followers, not a member of the project, and so on.
Similarly, as I was talking, like, mentioning before
that high action-based trust,
of course you see here that there is a lot of detailed frequent feedback, good questions, and you see here, like, you know,
there's like someone asking for this question,
there was, like, no responses, no discussions,
so you know there is - there is very, you know, less activity there.
Again, moving along the same lines,
commitment-based trust, reviewing and revising,
the third one requested and again because there is no response, there is no review requests, no changes are being implemented, nothing.
And then the personality-based trust,
just by looking at, you know, how many pull requests were closed by that person,
and institutional trust, again, we look at the developer profile and see how many organizations - GitHub organizations - they are part of,
if there are common GitHub organizations that they are part of,
and so on.
So overall the point here I'm trying to make is that, you know, our inherent, you know, propensity to trust people
drives our - some of our very important decisions in software engineering
and this is just one example of it.
And if we want to do better and, you know, improve trust and collaboration we need to understand and think about
the decisions that we are making here and why we are making those decisions.
So overall I suggest that, you know, examine what you trust and how you trust in your software engineering team.
This will help you identify the risks in your collaboration in future.
If you identify certain aspects that drives a decision,
I suggest you speak frankly about your trust levels and that kind of just improves transparency
and improves collaboration and communication in the team.
Understanding team dynamics in terms of these trust dimensions that I talked about today can also help project managers in timely interventions.
Of course, automatically detecting trust is a very difficult concept as of now,
because, you know, we as human beings first need to understand what is trust and why we are making those decisions.
So this work was a kind of a, you know, the first stepping stone towards that.
And as I was, like, briefly touched upon before so the most most important part is that
practitioners should focus on transparent communication and regular feedback along these lines and this trust from trust dimensions
would build and maintain trust in your teams.
So that is all that I have for today.
There is a QR code here with - which links to the preprint of our paper,
and this work is just a one small part of our bigger project of emotion awareness in software engineering.
So if you are interested to know more please refer to my website or feel free to connect with me - contact me and I'll be happy to answer any questions.
Thank you.
Fantastic, thank you so much if we can get Christian started setting up,
we do have one question and maybe we have time to get that one out the way while we're waiting for - while he gets set up
So we had a question is there a nuance between institutional and commitment trust
because it seems like they might just be special cases of one another?
There is - they are definitely correlated because institutional trust, by that, we do not go beyond anything apart from
if they're part of the same institutions or not, right?
But commitment-based trust is more.
It's like, okay, you can be a part of the same organization,
but you if you're not committed towards the same goal you are not developing that level of trust.
So I would say in my mind institution trust is just, like, at a very basic level
and commitment based trust kind of builds on top of that - it could build on top of that.
Got it.
